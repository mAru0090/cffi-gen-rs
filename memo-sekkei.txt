基本設計やメモは下記に述べた通りだが、
開発手順としては下記のようにする。
1. cffi_genをほぼ完全に下記の仕様通りに作成
2. cffi,cffi_moduleを作成し、cffi-gen内のコードを流用しながら作成
3. cffi_gen内の処理をcffi,cffi_moduleを使って生成に変更
4. 最終的にcffi_genがcffi,cffi_moduleに依存させる形にする



== 基本設計等 ==
・dxlib_genと別で、汎用的なcffi_genを作成
	- dxlib_rsのutils内の解析関係は全てCFFIAnalayzer::* のグローバルな静的関数にするなど(&self,&mutはなし) 
	enum RawPointer<T> {
    		Mutable(*mut T),
    		Constant(*const T),
	}
	// ポインター型の変換用トレイト
	trait ToRawPointer<T>: Sized {
    		fn to_raw_pointer(self) -> RawPointer<T>;
	}
	- 自作の引数変換処理には、トレイト実装をすることで処理する
	つまり、実装したい型ごとにToRawPointer<T>:Sizedを実装すれば、
	自動的にそれらが使用される。
・基本的にアトリビュートはconfigブロック、
functionsブロック内の関数宣言前、関数引数前で使用可能だが、
configブロックで宣言後、functions内で同じアトリビュートを使用した場合(可能なもの)は、
上書きされる。
・基本的にアトリビュートの形式は
	- name = value
	- name(value)
	- name
に対応させて、値は文字列ではなく、Expr::Pathの式として渡せるようにする。
つまり、name = ""も、name =CONSTANT_NUMもnameだけも対応

== 基本仕様 == 
・cffi_gen!は、Cライブラリ等のラップ関数を自動的に生成するマクロ
・主にstd,その他ユーティリティ、anyhowとthiserrorに依存
・基本的に何もしない場合は、全て関数名通りのunsafe externが作成され、
それらをそのまま呼び出せる形になる。
つまり、
	cffi_gen! {
		config {
			#[library_name = "DxLib_x64"]
		}
		functions {
 			fn dx_DxLib_Init() -> i32,
		}
	}
等をした場合は、そのままdx_DxLib_Initが作成され、指定のライブラリ名.libと.dllを参照して実行することとなる
・もしrust風のラップを行いたい場合は、
	cffi_gen! {
		config {
			#[library_name = "DxLib_x64"]
			#[as_result] 
			#[arg_convert = default] 
		}
		functions {
  			fn dx_DxLib_Init() -> i32,
		}
	}
等のようにすることで、内部的には、fn dx_DxLib_Init() -> anyhow::Result<i32,FFI_GeneralError>が生成される。また、エラー型を指定したい場合は、マクロトップレベルで、
	#[as_result_error_type("CustomError")]
を指定する、もしくは関数の前にこれを指定する。

・マクロの基本的な仕様
	- #[library_name = value] : config{}内でのみ使用可能
		・ライブラリ名の指定
	- #[func_name = value] : 関数宣言上部でのみ使用可能
		・リンク時に使用する関数名を指定した名前にして、生成
	- #[func_alias = value] : 関数宣言上部でのみ使用可能
		・実際に使用可能になる関数が指定の名前で生成される(ffiでの名前は、関数宣言自体で指定した名前、もしくは#[func_name(value)]で指定された名前が使用される
		そのため、
			#[func_alias = "dxlib_init"]
  			fn dx_DxLib_Init() -> i32,
		等をした場合、ffi用の
			fn dx_DxLib_Init() -> i32;
		が生成され、使用者向けの
			fn dxlib_init() -> i32 {
				// 具体的なコード
				dx_DxLib_Init()
			}
		が生成される。
		尚、#[func_name = value]が併用され場合、
			#[func_name = "dx_DxLib_Init2"]
			#[func_alias = "dxlib_init"]
  			fn dx_DxLib_Init2() -> i32,
		等をした場合、
			ffi用のdx_DxLib_Init2() -> i32;
			が生成され、
			使用者向けのdxlib_init() -> i32 {
				// 具体的なコード
				dx_DxLib_Init2()
			}
		が生成される。
		)
	- #[as_result_error_type = value] : config{}内、関数宣言上部でのみ使用可能
		・#[as_result]を使用された場合にのみ使える
		・指定されたエラー型を使用する
		・thiserror::Errorトレイトを必須とする(enum必須)
	- #[as_result_error_type_top_priority = value] : config{}内、関数宣言上部でのみ使用可能
		・指定されたenum値を使用してエラー時に戻り値を返すようにする
		・エラー条件は、#[error_condition=value]で指定したもの、もしくはデフォルトのエラー条件を使用する。	
	- #[as_result_error_type_top_priority = default] : config{}内、関数宣言上部でのみ使用可能
		・デフォルトのエラーのバリアントを使用してエラー時に戻り値を返すようにする
		・エラー条件は、#[error_condition=value]で指定したもの、もしくはデフォルトのエラー条件を使用する。
	
	- #[link_type = value] : config{}内でのみ使用可能
		・ライブラリのリンクタイプを指定する
	- #[as_result],#[as_result = default] : config{}内、関数宣言上部でのみ使用可能
		・デフォルトの戻り値の型を使用(anyhow::Result)
	- #[as_result = false] : config{}内、関数宣言上部でのみ使用可能
		・デフォルトの戻り値の型を使用しない
		・純粋に指定された戻り値でffi,ラップの関数を生成する
		・このアトリビュート自体が指定されていない場合と同義

	- #[arg_convert = default] : config{}内、関数宣言上部でのみ使用可能
		・デフォルトの引数変換処理を使用
		- 具体的なポインタ等、デフォルトの変換処理(
			c_charはstd::os::rawのもので、
			エンコードは基本的にUTF8基準だが、
			その他対応は考える必要あり
		)

			・&str -> *const
			・String -> *const
			・&String -> *const 
			・&mut String -> *mut c_char
			・Vec<T> -> *const T
			・&Vec<T> -> *const T
			・&mut Vec<T> -> *mut T
			・&[T] -> *const T
			・&mut [T] -> *mut T
			・impl AsRef<str> -> *const c_char
			・&impl AsRef<str> -> *const c_char
			・&mut AsMut<str> -> *mut c_char
			・impl ToString -> *const c_char
			・&impl ToString -> *const c_char
			・&mut impl ToString -> *mut c_char
			・[T;N] -> *const T
			・&[T;N] -> *const T
			・&mut [T;N] -> *mut T
			・構造体型 -> #[repr(c)]をされている構造体のみ そのまま渡す
			・&構造体型 -> #[repr(c)]をされている構造体のみ &構造体型 as *const 構造体型にして渡す
			・&mut 構造体型 -> #[repr(c)]をされている構造体のみ &mut 構造体型 as *mut 構造体型にして渡す
			・Option<T> -> T
			・プリミティブ型 -> 基本的にそのまま

	- #[arg_convert = false] : config{}内、関数宣言上部でのみ使用可能
		・デフォルトの引数変換処理を使用しない	
	- #[as_arg_type = value] : 関数宣言内引数前でのみ使用可能
		・引数の型を指定型に変換する(暗黙的な変換(as,Into)、Intoが使用できない場合、asが使用される。その場合、負数、少数の値こぼれ等は考慮されない)	
	- #[as_arg_type = value] : 関数宣言内引数前でのみ使用可能
		・引数の型を指定型に変換する(暗黙的な変換(as,Into)、Intoが使用できない場合、asが使用される。その場合、負数、少数の値こぼれ、切り捨て等は考慮されない)	
	- #[option_default = default] : 関数宣言内引数前でのみ使用可能
		・Option型が使用された際、Noneの場合にデフォルトの値が指定される
	- #[option_default = value] : 関数宣言内引数前でのみ使用可能
		・Option型が使用された際、Noneの場合に引数の値が指定される
	- #[error_condition = value] : config{}内、関数宣言上部でのみ使用可能
		・指定された条件をエラー条件として生成する
		・resultという名前で比較可能 #[error_condition("result == i32::MAX")]等
	- #[error_condition = default] : config{}内、関数宣言上部でのみ使用可能
		・デフォルトの条件をエラー条件として生成する
	- #[not_null_assert = false] : config{}内、関数宣言上部でのみ使用可能
		・引数が自動的に*mut,*const等に変換されたものの場合に実行されるnullチェック用assertを無効にする
	- #[not_null_assert = true] : config{}内、関数宣言上部でのみ使用可能
		・引数が自動的に*mut,*const等に変換されたものの場合に実行されるnullチェック用assertを有効にする
		・デフォルトで採択されるため、このマクロはfalseしない限り採択される
	- #[func_name_top_prefix = value] : config{}内、関数宣言上部でのみ使用可能
		・指定の文字列を、指定された関数宣言の名前の最初につける
			- 具体的に処理されること
				cffi_gen!の中で、
					fn DxLib_Init() -> i32
				が指定されているとき、
					#[func_name_top_prefix="dx_"]
				を場合、リンクされる関数は、
					fn dx_DxLib_Init() -> i32
				として生成される
	- #[func_name_down_prefix = value] : config{}内、関数宣言上部でのみ使用可能
		・指定の文字列を、指定された関数宣言の名前の最後につける
			- 具体的に処理されること
				cffi_gen!の中で、
					fn DxLib_Init() -> i32
				が指定されているとき、
					#[func_name_top_prefix="_dx"]
				を場合、リンクされる関数は、
					fn DxLib_Init_dx() -> i32
				として生成される


例1
static mut DEFAULT_RECT: RECT = RECT { left: -1, right: -1, top: -1, bottom: -1, }; fn default_rect_ptr() -> *mut RECT { unsafe { &raw mut DEFAULT_RECT } }

cffi_gen! {
 config{
	#[library_name = "DxLib_x64"]
 }
 functions{
 	#[as_result] #[arg_convert = default] fn DxLib_Init() -> i32,
 	#[as_result] #[arg_convert = default] fn DxLib_End() -> i32,
 	#[as_result] #[arg_convert = default] fn ProcessMessage() -> i32,
 	#[as_result] #[arg_convert = default] fn ScreenFlip() -> i32,
 	#[as_result] #[arg_convert = default] fn SetDrawScreen(#[option_default = "DX_SCREEN_BACK"] draw_screen: Option<i32>) -> i32,
 	#[as_result] #[arg_convert = default] fn ClearDrawScreen(#[option_default = "default_rect_ptr()"] clear_rect: Option<*mut RECT>) -> i32,
 }
}

例2
static mut DEFAULT_RECT: RECT = RECT { left: -1, right: -1, top: -1, bottom: -1, }; fn default_rect_ptr() -> *mut RECT { unsafe { &raw mut DEFAULT_RECT } }

cffi_gen! {
  config{
  	#[library_name = "DxLib_x64"]
	#[as_result] 
	#[arg_convert = default] 
  }
  functions{
  	fn DxLib_Init() -> i32,
  	fn DxLib_End() -> i32,
  	fn ProcessMessage() -> i32,
 	fn ScreenFlip() -> i32,
  	fn SetDrawScreen(#[option_default = "DX_SCREEN_BACK"] draw_screen: Option<i32>) -> i32,
  	fn ClearDrawScreen(#[option_default = "default_rect_ptr()"] clear_rect: Option<*mut RECT>) -> i32,
  }
}
#[lib="DxLib_x64"]
#[func_name_top_prefix="dx_"]
cffi!{
	#[as_result]
	#[doc]
	fn DxLib_Init() -> i32;
	#[cffi_module]
	#[as_result]
	#[doc]
	mod dxlib {
		fn DxLib_Init() -> i32;
	}
}
cffi : アトリビュート,(Option<アトリビュート付き関数>,Option<アトリビュート付きインラインモジュール>)
下記の様にする。
// 属性付き関数
pub struct FunctionWithAttrs {
    pub item_fn: ItemFn,
}
pub struct ModWithAttrs{	 
    pub item_mod: ItemMod,
    pub fns: Vec<FunctionWithAttrs>,
}
pub enum CFFIInputType{
	Fn(Punctuated<FunctionWithAttrs, Token![;]>),
	Mod(Vec<ModWithAttrs>),
}
// マクロ全体
pub struct CFFIInput {
    pub attrs: Vec<Attribute>,
    pub inputs: Vec<CFFIInputType>,
}










追加機能の例1 
#[cffi_module(
	lib="DxLib_x64",
	func_name_top_prefix="dx_"
)]
mod dxlib {
	#[cffi]
	fn DxLib_Init() -> i32;
}

#[cffi(lib="DxLib_x64")]
fn DxLib_Init() -> i32;

追加機能の例2
#[cffi_module(
	lib="DxLib_x64",
	as_result,
	arg_convert=default,
	func_name_top_prefix="dx_"
)]
mod runtime {
	#[cffi]
	fn DxLib_Init() -> i32;
	#[cffi]
	fn DxLib_Init() -> i32;
	#[cffi]
	fn SetDrawScreen(screen: i32) -> i32;
	#[cffi]
	fn WaitKey() -> i32;
}

#[cffi_module(
	lib="DxLib_x64",
	arg_convert=default,
	as_result,
	func_name_top_prefix="dx_"
)]
mod drawing {
	#[cffi]
	fn GetColor(red:i32,green:i32,blue:i32) -> i32;
	#[cffi]
	fn DrawString(x:i32,y:i32,string:AsRef<str>,color:i32) -> i32;
}
呼び出し時
fn main() -> anyhow::Result<()> {
	runtime::DxLib_Init()?;
	drawing::DrawString(0,0,"hello world",drawing::GetColor(255,255,255))?;
	runtime::WaitKey()?;
	runtime::DxLib_End()?;
}












// 2025/05/09までの現存コード 直書き
/*
extern crate proc_macro;
mod cffi_analyzer;
mod cffi_error;
mod defines;
use anyhow::Result;
use cffi_analyzer::*;
use proc_macro::TokenStream;
use quote::{format_ident, quote};
use std::sync::Mutex;
use syn::{
    Expr, ExprLit, FnArg, GenericArgument, Ident, Lit, LitStr, Meta, MetaNameValue, Pat, PatType,
    PathArguments, ReturnType, Signature, Token, Type, TypeParamBound, TypePath, TypeReference,
    braced,
    parse::{Parse, ParseStream},
    parse_macro_input, parse_str,
    punctuated::Punctuated,
};

// 属性付き関数
struct FunctionWithAttrs {
    attrs: Vec<syn::Attribute>,
    sig: syn::Signature,
}

impl Parse for FunctionWithAttrs {
    fn parse(input: ParseStream) -> syn::Result<Self> {
        let attrs = input.call(syn::Attribute::parse_outer)?;
        let sig: Signature = input.parse()?;
        Ok(FunctionWithAttrs { attrs, sig })
    }
}

// マクロ全体
struct CFFIGenInput {
    config_attrs: Vec<syn::Attribute>,
    fns: Punctuated<FunctionWithAttrs, Token![,]>,
}

impl Parse for CFFIGenInput {
    fn parse(input: ParseStream) -> syn::Result<Self> {
        // `config` ブロック
        input.parse::<Ident>().and_then(|ident| {
            if ident != "config" {
                return Err(syn::Error::new(ident.span(), "expected `config`"));
            }
            Ok(())
        })?;

        let content_config;
        braced!(content_config in input);
        //let config_attrs = content_config.call(syn::Attribute::parse_outer)?;

        // ←ここで自前ループ
        let mut config_attrs = Vec::new();
        while !content_config.is_empty() {
            // Attribute::parse_outer は Vec<Attribute> を返す
            let mut attrs = content_config.call(syn::Attribute::parse_outer)?;
            config_attrs.append(&mut attrs);

            // カンマがあれば消費して次へ
            if content_config.peek(Token![,]) {
                content_config.parse::<Token![,]>()?;
            }
        }
        // `functions` ブロック
        input.parse::<Ident>().and_then(|ident| {
            if ident != "functions" {
                return Err(syn::Error::new(ident.span(), "expected `functions`"));
            }
            Ok(())
        })?;

        let content_functions;
        braced!(content_functions in input);

        let fns = Punctuated::<FunctionWithAttrs, Token![,]>::parse_terminated(&content_functions)?;
        Ok(CFFIGenInput {
            config_attrs: config_attrs,
            fns,
        })
    }
}

#[proc_macro]
pub fn cffi_gen(input: TokenStream) -> TokenStream {
    let CFFIGenInput { config_attrs, fns } = parse_macro_input!(input as CFFIGenInput);

    let lib_name = CFFIAnalyzer::extract_library_name_attr(&config_attrs);
    // CString を使うための import
    let mut output = quote! {
        use std::ffi::CString;
        use std::os::raw::c_char;
    };

    let mut extern_name_top_prefix =
        if let Some(top_prefix) = CFFIAnalyzer::func_name_top_prefix_attr(&config_attrs) {
            top_prefix
        } else {
            String::new()
        };
    let mut extern_name_down_prefix =
        if let Some(down_prefix) = CFFIAnalyzer::func_name_down_prefix_attr(&config_attrs) {
            down_prefix
        } else {
            String::new()
        };
    let link_type = if let Some(link_type) = CFFIAnalyzer::extract_link_type_attr(&config_attrs) {
        link_type
    } else {
        String::new()
    };
    let mut is_as_result = CFFIAnalyzer::is_as_result_attr(&config_attrs);
    for FunctionWithAttrs { attrs, sig } in fns.iter() {
        let wrapper_name = CFFIAnalyzer::extract_func_alias_attr(attrs)
            .map(|alias| format_ident!("{}", alias))
            .unwrap_or_else(|| sig.ident.clone());

        // 関数単位で指定がある場合、as_resultの値を上書き
        let is_fn_as_result = if CFFIAnalyzer::is_as_result_attr(attrs) {
            true
        } else {
            is_as_result // configの設定を引き継ぐ
        };
        // 関数単位で指定がある場合、プレフィックス指定を上書き
        if let Some(top_prefix) = CFFIAnalyzer::func_name_top_prefix_attr(attrs) {
            extern_name_top_prefix = top_prefix;
        } else if let Some(down_prefix) = CFFIAnalyzer::func_name_down_prefix_attr(attrs) {
            extern_name_down_prefix = down_prefix;
        }

        let extern_name = if !extern_name_top_prefix.is_empty() {
            format_ident!("{}{}", extern_name_top_prefix, sig.ident.clone())
        } else if !extern_name_down_prefix.is_empty() {
            format_ident!("{}{}", extern_name_down_prefix, sig.ident.clone())
        } else {
            format_ident!("{}", sig.ident.clone())
        };

        let output_ty = &sig.output;
        let generics = &sig.generics;

        let mut wrapper_args = Vec::new();
        let mut extern_args = Vec::new();
        let mut convert_stmts = Vec::new();
        let mut call_idents = Vec::new();

        let return_type = CFFIAnalyzer::get_return_type(&sig).unwrap();

        let error_condition = CFFIAnalyzer::extract_error_condition_attr(attrs)
            .unwrap_or_else(|| quote! { result as i32 == -1i32 });

        for arg in sig.inputs.iter() {
            if let FnArg::Typed(PatType { pat, ty, attrs, .. }) = arg {
                let ident = match &**pat {
                    Pat::Ident(pi) => &pi.ident,
                    _ => panic!("パターン付き引数は未対応です"),
                };

                if let Some(inner_ty) = CFFIAnalyzer::is_option(&ty) {
                    // Option<T> の場合
                    wrapper_args.push(quote! { #ident: Option<#inner_ty> });

                    let default_expr = CFFIAnalyzer::extract_default_expr(attrs)
                        .unwrap_or_else(|| quote! { Default::default() });

                    convert_stmts.push(quote! {
                        let #ident = match #ident {
                            Some(value) => value,
                            None => #default_expr,
                        };
                    });

                    extern_args.push(quote! { #ident: #inner_ty });
                    call_idents.push(quote! { #ident });

                    continue;
                }

                if CFFIAnalyzer::is_impl_as_ref_type(&ty) {
                    // まず ty 自体が参照型かどうかを判定
                    if let Type::Reference(ref_type) = &**ty {
                        if let Some(inner_ty) = CFFIAnalyzer::extract_as_ref_generic(&ref_type.elem)
                        {
                            if ref_type.mutability.is_none() {
                                if let Type::Path(type_path) = inner_ty {
                                    let ident_str =
                                        type_path.path.segments.last().unwrap().ident.to_string();

                                    if ident_str == "str" || ident_str == "String" {
                                        wrapper_args.push(quote! {
                                            #ident: &impl AsRef<#inner_ty>
                                        });

                                        extern_args.push(quote! {
                                            #ident: *const ::std::os::raw::c_char
                                        });

                                        let holder_ident = format_ident!("__{}_holder", ident);
                                        convert_stmts.push(quote! {
                                            let #holder_ident = CStringHolder::new(#ident.as_ref());
                                            let #ident = #holder_ident.as_ptr();
                                        });

                                        call_idents.push(quote! { #ident });
                                        continue;
                                    }
                                }
                            } else {
                                if let Type::Path(type_path) = inner_ty {
                                    let ident_str =
                                        type_path.path.segments.last().unwrap().ident.to_string();

                                    if ident_str == "str" || ident_str == "String" {
                                        wrapper_args.push(quote! {
                                            #ident: &mut impl AsRef<#inner_ty>
                                        });

                                        extern_args.push(quote! {
                                            #ident: *const ::std::os::raw::c_char
                                        });

                                        let holder_ident = format_ident!("__{}_holder", ident);
                                        convert_stmts.push(quote! {
                                            let #holder_ident = CStringHolder::new(#ident.as_ref());
                                            let #ident = #holder_ident.as_ptr();
                                        });

                                        call_idents.push(quote! { #ident });
                                        continue;
                                    }
                                }
                            }
                        }
                    }

                    // 通常の impl AsRef<T> 型（参照ではない）
                    if let Some(inner_ty) = CFFIAnalyzer::extract_as_ref_generic(&ty) {
                        if let Type::Path(type_path) = inner_ty {
                            let ident_str =
                                type_path.path.segments.last().unwrap().ident.to_string();
                            if ident_str == "str" || ident_str == "String" {
                                wrapper_args.push(quote! {
                                    #ident: impl AsRef<#inner_ty>
                                });

                                extern_args.push(quote! {
                                    #ident: *const ::std::os::raw::c_char
                                });

                                let holder_ident = format_ident!("__{}_holder", ident);
                                convert_stmts.push(quote! {
                                    let #holder_ident = CStringHolder::new(#ident.as_ref());
                                    let #ident = #holder_ident.as_ptr();
                                });

                                call_idents.push(quote! { #ident });
                                continue;
                            }
                        }

                        // 汎用パターン（*const T）
                        wrapper_args.push(quote! {
                            #ident: impl AsRef<#inner_ty>
                        });

                        extern_args.push(quote! {
                            #ident: *const #inner_ty
                        });

                        convert_stmts.push(quote! {
                            let #ident = #ident.as_ref().as_ptr();
                        });

                        call_idents.push(quote! { #ident });
                        continue;
                    }
                } else if CFFIAnalyzer::is_impl_as_mut_type(&ty) {
                    // まず `ty` 自体が参照型かどうかを判定する
                    if let Type::Reference(ref_type) = &**ty {
                        if ref_type.mutability.is_some() {
                            if let Some(inner_ty) =
                                CFFIAnalyzer::extract_as_mut_generic(&ref_type.elem)
                            {
                                // &mut impl AsMut<[T]> にマッチ
                                if let Type::Slice(slice) = inner_ty {
                                    let elem_ty = &slice.elem;

                                    wrapper_args.push(quote! {
                                        #ident: &mut impl AsMut<[#elem_ty]>
                                    });

                                    extern_args.push(quote! {
                                        #ident: *mut #elem_ty
                                    });

                                    convert_stmts.push(quote! {
                                        let #ident = #ident.as_mut().as_mut_ptr();
                                    });

                                    call_idents.push(quote! { #ident });
                                    continue;
                                }
                            }
                        } else {
                            if let Some(inner_ty) =
                                CFFIAnalyzer::extract_as_mut_generic(&ref_type.elem)
                            {
                                // &impl AsMut<[T]> にマッチ
                                if let Type::Slice(slice) = inner_ty {
                                    let elem_ty = &slice.elem;

                                    wrapper_args.push(quote! {
                                        #ident: &impl AsMut<[#elem_ty]>
                                    });

                                    extern_args.push(quote! {
                                        #ident: *mut #elem_ty
                                    });

                                    convert_stmts.push(quote! {
                                        let #ident = #ident.as_mut().as_mut_ptr();
                                    });

                                    call_idents.push(quote! { #ident });
                                    continue;
                                }
                            }
                        }
                    }

                    // 通常の impl AsMut<[T]> 型の処理
                    if let Some(inner_ty) = CFFIAnalyzer::extract_as_mut_generic(&ty) {
                        if let Type::Slice(slice) = inner_ty {
                            let elem_ty = &slice.elem;

                            wrapper_args.push(quote! {
                                #ident: impl AsMut<[#elem_ty]>
                            });

                            extern_args.push(quote! {
                                #ident: *mut #elem_ty
                            });

                            convert_stmts.push(quote! {
                                let #ident = #ident.as_mut().as_mut_ptr();
                            });

                            call_idents.push(quote! { #ident });
                            continue;
                        }
                    }
                }

                if CFFIAnalyzer::is_impl_to_string(&ty) {
                    wrapper_args.push(quote! { #ident: impl ToString });
                    extern_args.push(quote! { #ident: *const c_char });

                    let holder_ident = format_ident!("__{}_holder", ident);
                    convert_stmts.push(quote! {
                        let #holder_ident = CStringHolder::new(#ident.to_string());
                        let #ident = #holder_ident.as_ptr();
                    });

                    call_idents.push(quote! { #ident });
                    continue;
                }

                if CFFIAnalyzer::is_impl_display(&ty) {
                    wrapper_args.push(quote! { #ident: impl Display });
                    extern_args.push(quote! { #ident: *const c_char });

                    let holder_ident = format_ident!("__{}_holder", ident);
                    convert_stmts.push(quote! {
                        let #holder_ident = CStringHolder::new(#ident.to_string());
                        let #ident = #holder_ident.as_ptr();
                    });

                    call_idents.push(quote! { #ident });
                    continue;
                }

                // `impl Into<Vec<T>>` の場合、不変と可変を分けて処理
                if CFFIAnalyzer::is_impl_trait_into_vec(&ty) {
                    // Vec<T> の T を取得
                    let inner_ty = CFFIAnalyzer::extract_vec_inner_type_from_impl_trait(&ty);

                    if let Some(inner_ty) = inner_ty {
                        // 不変Vec<T> → *const T
                        if let Some(_) = CFFIAnalyzer::is_ref_vec_type(&ty) {
                            wrapper_args.push(quote! { #ident: impl Into<Vec<#inner_ty>> });
                            extern_args.push(quote! { #ident: *const #inner_ty });

                            convert_stmts.push(quote! {
                                let #ident = #ident.as_ptr();
                            });

                            call_idents.push(quote! { #ident });
                            continue;
                        }
                        // 可変Vec<T> → *mut T
                        else if let Some(_) = CFFIAnalyzer::is_mut_ref_vec_type(&ty) {
                            wrapper_args.push(quote! { #ident: impl Into<Vec<#inner_ty>> });
                            extern_args.push(quote! { #ident: *mut #inner_ty });

                            convert_stmts.push(quote! {
                                let #ident = #ident.as_mut_ptr();
                            });

                            call_idents.push(quote! { #ident });
                            continue;
                        }
                    }
                }
                // 配列の場合は、*const Tに変換
                if CFFIAnalyzer::is_array(&ty) {
                    let (inner_ty, n) = CFFIAnalyzer::extract_array(&ty).unwrap();
                    wrapper_args.push(quote! { #ident: [#inner_ty;#n] });
                    extern_args.push(quote! { #ident: *const #inner_ty });

                    convert_stmts.push(quote! {
                        let #ident = #ident.as_ptr();
                    });

                    call_idents.push(quote! { #ident });
                    continue;
                } else if CFFIAnalyzer::is_mut_array(&ty) {
                    let (inner_ty, n) = CFFIAnalyzer::extract_mut_array(&ty).unwrap();
                    wrapper_args.push(quote! { #ident: &mut [#inner_ty;#n] });
                    extern_args.push(quote! { #ident: *mut #inner_ty });

                    convert_stmts.push(quote! {
                        let #ident = #ident.as_mut_ptr();
                    });

                    call_idents.push(quote! { #ident });
                    continue;
                }
                // 不変スライスの場合は、*const Tに変換
                if CFFIAnalyzer::is_slice(&ty) {
                    let inner_ty = CFFIAnalyzer::extract_slice(&ty);
                    wrapper_args.push(quote! { #ident: &[#inner_ty] });
                    extern_args.push(quote! { #ident: *const #inner_ty });

                    convert_stmts.push(quote! {
                        let #ident = #ident.as_ptr();
                    });

                    call_idents.push(quote! { #ident });
                    continue;
                // 可変スライスの場合は、*mut Tに変換
                } else if CFFIAnalyzer::is_mut_slice(&ty) {
                    let inner_ty = CFFIAnalyzer::extract_mut_slice(&ty);
                    wrapper_args.push(quote! { #ident: &mut [#inner_ty] });
                    extern_args.push(quote! { #ident: *mut #inner_ty });

                    convert_stmts.push(quote! {
                        let #ident = #ident.as_mut_ptr();
                    });

                    call_idents.push(quote! { #ident });
                    continue;
                }
                // Vec<T>の場合は、*const Tに変換
                if CFFIAnalyzer::is_vec_type(&ty) {
                    let inner_ty = CFFIAnalyzer::extract_vec_inner_type(&ty);
                    wrapper_args.push(quote! { #ident: Vec<#inner_ty> });
                    extern_args.push(quote! { #ident: *const #inner_ty });

                    convert_stmts.push(quote! {
                        let #ident = #ident.as_ptr();
                    });

                    call_idents.push(quote! { #ident });
                    continue;
                // Vec<T>の場合は、*mut Tに変換
                } else if CFFIAnalyzer::is_mut_vec_type(&ty) {
                    let inner_ty = CFFIAnalyzer::extract_vec_inner_type(&ty);
                    wrapper_args.push(quote! { #ident: &mut Vec<#inner_ty> });
                    extern_args.push(quote! { #ident: *mut #inner_ty });

                    convert_stmts.push(quote! {
                        let #ident = #ident.as_mut_ptr();
                    });

                    call_idents.push(quote! { #ident });
                    continue;
                }

                // &str の場合は *const c_char に変換
                if let Type::Reference(TypeReference { elem, .. }) = &**ty {
                    if let Type::Path(TypePath { path, .. }) = &**elem {
                        if path.is_ident("str") {
                            wrapper_args.push(quote! { #ident: &str });
                            extern_args.push(quote! { #ident: *const c_char });

                            let holder_ident = format_ident!("__{}_holder", ident);
                            convert_stmts.push(quote! {
                                let #holder_ident = CStringHolder::new(#ident.to_string());
                                let #ident = #holder_ident.as_ptr();
                            });

                            call_idents.push(quote! { #ident });
                            continue;
                        }
                    }
                }

                // String の場合は *const c_char に変換
                if let Type::Path(TypePath { path, .. }) = &**ty {
                    if path.is_ident("String") {
                        wrapper_args.push(quote! { #ident: String });
                        extern_args.push(quote! { #ident: *const c_char });

                        let holder_ident = format_ident!("__{}_holder", ident);
                        convert_stmts.push(quote! {
                            let #holder_ident = CStringHolder::new(#ident.to_string());
                            let #ident = #holder_ident.as_ptr();
                        });

                        call_idents.push(quote! { #ident });
                        continue;
                    }
                }

                // &String の場合は *const c_char に変換
                if let Type::Reference(TypeReference { elem, .. }) = &**ty {
                    if let Type::Path(TypePath { path, .. }) = &**elem {
                        if path.is_ident("String") {
                            wrapper_args.push(quote! { #ident: &String });
                            extern_args.push(quote! { #ident: *const c_char });
                            let holder_ident = format_ident!("__{}_holder", ident);
                            convert_stmts.push(quote! {
                                let #holder_ident = CStringHolder::new(#ident.to_string());
                                let #ident = #holder_ident.as_ptr();
                            });

                            call_idents.push(quote! { #ident });
                            continue;
                        }
                    }
                }
                // &mut String の場合は CString に変換 (可変ポインタ *mut c_char)
                if let Type::Reference(TypeReference {
                    elem, mutability, ..
                }) = &**ty
                {
                    if let Type::Path(TypePath { path, .. }) = &**elem {
                        if path.is_ident("String") && mutability.is_some() {
                            // &mut String の場合
                            wrapper_args.push(quote! { #ident: &mut String });
                            extern_args.push(quote! { #ident: *mut c_char });
                            let holder_ident = format_ident!("__{}_holder", ident);
                            convert_stmts.push(quote! {
                                // String を CString に変換し、所有権を取得
                                let #holder_ident = CString::new(#ident.clone()).unwrap();  // cloneして保持
                                let #ident = #holder_ident.into_raw();  // *mut c_char を取得
                            });

                            call_idents.push(quote! { #ident });
                            continue;
                        }
                    }
                }
                // それ以外はそのまま
                wrapper_args.push(quote! { #ident: #ty });
                extern_args.push(quote! { #ident: #ty });
                call_idents.push(quote! { #ident });
            }
        }

        // let lib_name = CFFI_LIB_NAME;

        //let msg = syn::LitStr::new(&format!("{:?}", lib_name), proc_macro2::Span::call_site());
        //output.extend(quote! {
        //compile_error!(#msg);
        //});

        let extern_block = if !link_type.is_empty() {
            quote! {
                #[link(name = #lib_name,kind=#link_type)]
                unsafe extern "stdcall" {
                    fn #extern_name(#(#extern_args),*) #output_ty;
                }
            }
        } else {
            quote! {
                #[link(name = #lib_name)]
                unsafe extern "stdcall" {
                    fn #extern_name(#(#extern_args),*) #output_ty;
                }
            }
        };

        output.extend(extern_block);
        // DxLib_Init と DxLib_End 用の処理
        if wrapper_name == "DxLib_Init" {
            if is_fn_as_result {
                let wrapper_fn = quote! {
                  pub fn #wrapper_name #generics( #(#wrapper_args),* ) -> anyhow::Result<#return_type, DxLibError> {
                    #(#convert_stmts)*
                    unsafe {
                        let result: #return_type = #extern_name(#(#call_idents),*);
                        if #error_condition {
                            return Err(DxLibError::InitializeError);
                        } else {
                            return Ok(result);
                        }
                    }
                    }
                };
                output.extend(wrapper_fn);
            } else {
                let wrapper_fn = quote! {
                  pub fn #wrapper_name #generics( #(#wrapper_args),* ) -> #return_type {
                    #(#convert_stmts)*
                    unsafe {
                        let result: #return_type = #extern_name(#(#call_idents),*);
                        if #error_condition {
                            return -1;
                        } else {
                            return result;
                        }
                    }
                    }
                };
                output.extend(wrapper_fn);
            }
            continue; // 次の関数の処理に進む
        }
        if wrapper_name == "DxLib_End" {
            if is_fn_as_result {
                let wrapper_fn = quote! {
                  pub fn #wrapper_name #generics( #(#wrapper_args),* ) -> anyhow::Result<#return_type, DxLibError> {
                    #(#convert_stmts)*

                    unsafe {
                        let result: #return_type = #extern_name(#(#call_idents),*);

                        if #error_condition {
                            return Err(DxLibError::FinalizeError);
                        } else {
                            return Ok(result);
                        }

                     }
                    }
                };
                output.extend(wrapper_fn);
            } else {
                let wrapper_fn = quote! {
                  pub fn #wrapper_name #generics( #(#wrapper_args),* ) -> #return_type {
                    #(#convert_stmts)*
                    unsafe {
                        let result: #return_type = #extern_name(#(#call_idents),*);
                        if #error_condition {
                            return -1;
                        } else {
                            return result;
                        }
                    }
                    }
                };
                output.extend(wrapper_fn);
            }

            continue; // 次の関数の処理に進む
        }
        if is_fn_as_result {
            // wrapper 関数の生成
            let wrapper_fn = quote! {
                pub fn #wrapper_name #generics( #(#wrapper_args),* ) -> anyhow::Result<#return_type, DxLibError> {
                    #(#convert_stmts)*

                    unsafe {
                        let result: #return_type = #extern_name(#(#call_idents),*);
                        if #error_condition {
                            return Err(DxLibError::Other(anyhow::anyhow!("Error in {}", stringify!(#wrapper_name))));
                        } else {
                            return Ok(result);
                        }
                    }
                }
            };

            output.extend(wrapper_fn);
        } else {
            // wrapper 関数の生成
            let wrapper_fn = quote! {
                pub fn #wrapper_name #generics( #(#wrapper_args),* ) -> #return_type {
                    #(#convert_stmts)*

                    unsafe {
                        let result: #return_type = #extern_name(#(#call_idents),*);
                        if #error_condition {
                            return -1;
                        } else {
                            return result;
                        }
                    }
                }
            };

            output.extend(wrapper_fn);
        }
    }

    TokenStream::from(output)
}*/

     /*  if let Some((_, items)) = module.content {*/
        /*//println!("module.content is some");*/
        /*for item in items {*/

        /*println!("item: {}", quote! { #item });*/
        /*if let Item::Fn(ItemFn { attrs, sig, .. }) = item {*/
        /*fns.push_value(FunctionWithAttrs {*/
        /*attrs,*/
        /*sig: sig.clone(),*/
        /*});*/
        /*fns.push_punct(Token![;](sig.fn_token.span));*/
        /*} else {*/
        /*return Err(syn::Error::new_spanned(*/
        /*item,*/
        /*"Only `fn` items are allowed inside the module.",*/
        /*));*/
        /*}*/
        /*}*/
        /*} else {*/
        /*return Err(syn::Error::new_spanned(*/
        /*module,*/
        /*"Expected inline module body (not an external mod).",*/
        /*));*/
        /*}*/

