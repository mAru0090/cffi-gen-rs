2025/05/09
	現時点で実装しているもの
	== 主要 == 
	・cffi_genで、config、functionsのセクション分け
	・簡単なモジュール分離(可読性上げのため)
	・全体的な構想構築(
		cffi_gen構築後 - > cffi,cffi_module構築
		- > cffi_genで行うコード生成の処理に前述アトリビュートを使用
	)
	== 対応アトリビュート ==
	! ただし、値の形式は文字列だけ対応、式だけ対応とバラバラなため、統一すること!
	・#[library_name = value] : 関数別は現時点不可、configにて適用可能にはなっている
        ・#[link_type = value] : 関数別は現時点不可、configにて適用可能にはなっている
        ・#[as_result] : 関数別、configどちらも利用可能になっている
	・#[func_name_top_prefix = value ] , 
	  #[func_name_down_prefix = value ] : 関数別、configどちらも利用可能になっている
	・#[option_default = value] : 関数引数別で利用可能になっている
2025/05/11
	・現時点で#[arg_convert = default]時の内部処理を抽象化するため、
	RawPointer,GenericType等を使用して汎用的に進めている。
	尚、これらの実装が終了すれば、#[arg_convert = false]や何もない場合の際の、
	ユーザー独自の指定がトレイトベースで行える。(一部Option、Resultは置換コードの方が簡潔になる他、ユーザーが何かをやる可能性が低いため、実装はハードコードにする)
	・基本的に#[arg_convrt = default]及び、その他の引数変換内部処理のトレイト共通化が
	はかれれば、cffi_genの主要な部分は完成となる。
	もちろん、未実装、不完全アトリビュートはまだまだ大量に残っている
2025/05/12
	・理想形は、cffiアトリビュート、cffi_moduleアトリビュートを分けて、
	mod runtime{}等のインラインモジュールに直接適用予定だったが、
	仕様上、アトリビュートで読み込んで変換コードを出力前に、
	構文エラーになってしまうため、proc_macro_attributeではなく、proc_macroにする
	・proc_macroにし、cffi!{}等のブロック内で、属性つき関数、属性つきモジュールを
	許容させるようにすれば、cffi_gen内の処理を直接流用可能になる。
	尚、cffi!{}マクロを実装した場合、cffi_genは廃止し、クレート名、github名等も
	cffiに統一した方がよい。
	・cffi_gen自体はまだ完成していないが、cffi_genの処理を直接cffi!{}に流用する方針に
	するため、次回、cffi_gen処理はまだ未完全だが、cffiに変えるほうを優先させたほうが
	よい。また、構造体もItem::の各バリアントを使用するようにしたほうがよい(例えば、関数に紐づくAttributeは、ItemFnに含まれている等)
	その後、cffiに以降したら、下記の流れで作業を進める
	cffi_gen -> 名前をcffiにする、その他cffiにする -> cffiに統合
	-> 残りの変換トレイトを実装 -> インラインモジュールの処理を実装
